A. Preparation of Lab Environment

Set the hostname
To simplify the installation process, we can use the hostname instead of IP. We set the hostname in the hosts file for each node.

Execute on all nodes

1. Change hostname with your username, make sure the hostname is persistent.

root@podX-controller:~# hostname pod-<username>-controller
root@podX-controller:~# echo 'pod-<username>-controller' > /etc/hostname
root@podX-controller:~# exit
root@podX-managed1:~# hostname pod-<username>-managed1
root@podX-managed1:~# echo 'pod-<username>-managed1' > /etc/hostname
root@podX-managed1:~# exit
root@podX-managed2:~# hostname pod-<username>-managed2
root@podX-managed2:~# echo 'pod-<username>-managed2' > /etc/hostname
root@podX-managed2:~# exit
2. Map host on /etc/hosts

nano /etc/hosts 
...
10.X.X.10 pod-<username>-controller
10.X.X.20 pod-<username>-managed1
10.X.X.30 pod-<username>-managed2
...
ping -c 2 pod-<username>-controller
ping -c 2 pod-<username>-managed1
ping -c 2 pod-<username>-managed2
Make sure each node can communicate using hostname.

Create Sudo User
NOTE: We are running the installation as a non-root user with Sudo privileges.

Execute on all nodes

3. Create a regular user, the name of the user need to be same with username in this platform (ADINUSA).

adduser <username>
4. Register user to sudo group.

usermod -aG sudo <username>
5. Enable sudo without password.

echo "<username> ALL=(ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/<username>
6. Login to regular user.

su - <username>
Create and Distribute SSH Keygen
Because Ansible uses ssh to access other nodes, therefore we need to set the ssh key from the deployer (controller in our case) and distribute the ssh public key to the other nodes. This way the controller will be able to access other nodes without using a password.

Execute on all nodes

7. Create ssh-keygen

ssh-keygen -t rsa
8. Copy controller public key from regular user to all nodes.

ssh-copy-id -i ~/.ssh/id_rsa.pub <username>@pod-username-controller
ssh-copy-id -i ~/.ssh/id_rsa.pub <username>@pod-username-managed1
ssh-copy-id -i ~/.ssh/id_rsa.pub <username>@pod-username-managed2
9. Verify passwordless.

ssh <username>@pod-username-controller "whoami; hostname"
ssh <username>@pod-username-managed1 "whoami; hostname"
ssh <username>@pod-username-managed2  "whoami; hostname"

B. Installing Ansible

1. Update packages on the system, and install python3.

<username>@pod-username-controller:~$ sudo apt update -y ; sudo apt upgrade -y
<username>@pod-username-controller:~$ sudo apt install python3 python3-pip
2. Install Ansible.

 <username>@pod-username-controller:~$ sudo pip install ansible==2.9.13
 <username>@pod-username-controller:~$ ansible --version
3. Setup default configuration ansible.

 <username>@pod-username-controller:~$ sudo mkdir -p /etc/ansible
 <username>@pod-username-controller:~$ sudo vi /etc/ansible/hosts
...
pod-username-managed1

[webservers]
pod-username-managed2
...
4. Show all hosts from inventory.

 <username>@pod-username-controller:~$ ansible all --list-hosts
5. Show ungrouped hosts from inventory.

 <username>@pod-username-controller:~$ ansible ungrouped --list-hosts
6. Show hosts in group webservers.

 <username>@pod-username-controller:~$ ansible webservers --list-hosts
7. Check ping to all node.

 <username>@pod-username-controller:~$ ansible all -m ping

C. Ad-hoc Command

1. Show hostname all node.

 <username>@pod-username-controller:~$ ansible all -m command -a "hostname"
2. Show facts from managed1.

 <username>@pod-username-controller:~$ ansible pod-username-managed1 -m setup
3. Check information localhost.

 <username>@pod-username-controller:~$ ansible localhost -m command -a 'id'
 <username>@pod-username-controller:~$ ansible localhost -u <username> -m command -a 'id'
4. Update content to file /etc/motd.

 <username>@pod-username-controller:~$ ansible localhost --become -u <username> -m copy -a "content='Executed by Ansible\n' dest=/etc/motd"
 <username>@pod-username-controller:~$ ansible localhost -u <username> -m command -a 'cat /etc/motd'
5. Verify.

 <username>@pod-username-controller:~$ ssh pod-username-controller
...
Executed by Ansible
<username>@pod-username-controller:~$ exit
logout
Connection to pod-username-controller closed.
<username>@pod-username-controller:~$ 

D. Managing Ansible Configuration Files

1. Create a new directory.

<username>@pod-username-controller:~$ cd ~/
<username>@pod-username-controller:~$ mkdir -p deploy-review
<username>@pod-username-controller:~$ cd deploy-review
2. Create ansible configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory = ./inventory
remote_user = <username>
host_key_checking = False
...
3. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[servers]
pod-username-managed1
pod-username-managed2
4. Run ansible with ad-hoc command.

<username>@pod-username-controller:~$ ansible all -m command -a 'id'
<username>@pod-username-controller:~$ ansible all -m copy -a "content='This server is managed by Ansible. \n' dest=/etc/motd" --become
<username>@pod-username-controller:~$ ansible all -m command -a 'cat /etc/motd'
5. Verify.

<username>@pod-username-controller:~$ ssh pod-username-managed1 "whoami; cat /etc/motd"
<username>@pod-username-controller:~$ ssh pod-username-managed2 "whoami; cat /etc/motd"

E. Writing and Running Playbooks

1. Create directory.

<username>@pod-username-controller:~$ cd ~/
<username>@pod-username-controller:~$ mkdir -p playbook-basic/files
<username>@pod-username-controller:~$ cd playbook-basic
2. Create ansible configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory = ./inventory
remote_user = <username>
...
3. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[web]
pod-username-managed1
...
4. Create playbook.

<username>@pod-username-controller:~$ echo "This is a test page." > files/index.html

<username>@pod-username-controller:~$ vi site.yml
...
- name: Install and start Apache 2.
  hosts: pod-username-managed1
  become: true
  tasks:
    - name: apache2 package is present
      apt:
        update_cache: yes
        force_apt_get: yes
        name: apache2
        state: present

    - name: correct index.html is present
      copy:
        src: files/index.html
        dest: /var/www/html/index.html

    - name: Apache 2 is started
      service:
        name: apache2
        state: started
        enabled: true
...
5. Run playbook.

<username>@pod-username-controller:~$ ansible-playbook site.yml
6. Verify webserver.

<username>@pod-username-controller:~$ curl pod-username-managed1

F. Managing Variables

1. Create a directory.

<username>@pod-username-controller:~$ cd ~
<username>@pod-username-controller:~$ mkdir data-variables/
<username>@pod-username-controller:~$ cd data-variables/
2. Create ansible local configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory = ./inventory
remote_user = <username>
host_key_checking = False
...
3. Create an inventory.

<username>@pod-username-controller:~$ vi inventory
...
[webserver]
pod-username-managed2
4. Create playbook.

<username>@pod-username-controller:~$ vi playbook.yml
...
- name: Deploy and start Apache 2 service
  hosts: webserver
  become: true
  vars:
    web_pkg: apache2
    web_service: apache2
    python_pkg: python-urllib3
  tasks:
    - name: Required packages are installed and up to date
      apt:
        update_cache: yes
        force_apt_get: yes
        name:
          - "{{web_pkg}}"
        state: latest
    - name: The {{web_service}} service is started and enabled
      service:
         name: "{{web_service}}"
         enabled: true
         state: started
    - name: Web content is in place
      copy:
        content: "Example web content"
        dest: /var/www/html/index.html
- name: Verify the apache service
  hosts: localhost
  tasks:
    - name: Ensure the webserver is reacheable
      uri:
        url: http://pod-username-managed2
        status_code: 200
5. Running playbook.

<username>@pod-username-controller:~$ ansible-playbook --syntax-check playbook.yml
<username>@pod-username-controller:~$ ansible-playbook playbook.yml
6. Verify webserver.

<username>@pod-username-controller:~$ curl pod-username-managed2

G. Jinja 2 Template

1. Create directory.

<username>@pod-username-controller:~$ cd ~
<username>@pod-username-controller:~$ mkdir jinja2-template
<username>@pod-username-controller:~$ cd ~/jinja2-template
2. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[webservers]
pod-username-managed1
...
3. Create playbook.

<username>@pod-username-controller:~$ vi site.yml
...
- name: install and start apache2
  hosts: pod-username-managed1
  become: true

  tasks:
    - name: apache2 package is present
      apt:
        name: apache2
        state: present
        update_cache: yes
        force_apt_get: yes

    - name: restart apache2 service
      service: name=apache2 state=restarted enabled=yes

    - name: copy index.html
      template: src=<username>.html.j2 dest=/var/www/html/<username>.html
...
4. Create Jinja 2 template.

<username>@pod-username-controller:~$ vi <username>.html.j2
...
Hello World!
This is <username> site.
...
5. Run playbook.

<username>@pod-username-controller:~$ ansible-playbook site.yml
6. Verify.

<username>@pod-username-controller:~$ curl pod-username-managed1/<username>.html

H. Quiz 1 Ansible

1. Create a new folder in the user home directory. Name it quiz1.

2. In the quiz1 folder, create playbook with below tasks and executed to node pod-username-managed1:

a. Add mariadb 10.4 repository to the /etc/apt/sources.list.d/ using jinja2 template. Name the file of repository with mariadb.list, and name the file of jinja2 template with mariadb.list.j2
b. Install mariadb-server and mariadb-client
c. Start dan enable service mariadb-server (ensure the value of state in the service section is started), and make sure to write this on below format:
 - name: example name of service
      service: name=<service> state=<state of service> anotherkey=<another rvalue>
d. Name the file of playbook with service-mysql.yml

I. Managing Roles

1. Create directory.

<username>@pod-username-controller:~$ cd ~/
<username>@pod-username-controller:~$ mkdir role-create
<username>@pod-username-controller:~$ cd role-create
2. Create ansible configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory=./inventory
...
3. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[webservers]
pod-username-managed1
pod-username-managed2
...
4. Create roles.

<username>@pod-username-controller:~$ mkdir roles
<username>@pod-username-controller:~$ cd roles
<username>@pod-username-controller:~$ ansible-galaxy init myvhost
<username>@pod-username-controller:~$ rm -rvf myvhost/{defaults,vars,tests}
<username>@pod-username-controller:~$ cd ..
<username>@pod-username-controller:~$ mkdir -p roles/myvhost/files/html-1
<username>@pod-username-controller:~$ mkdir -p roles/myvhost/files/html-2
<username>@pod-username-controller:~$ echo 'simple index vhost1 : pod-username' > roles/myvhost/files/html-1/index.html
<username>@pod-username-controller:~$ echo 'simple index vhost2 : pod-username' > roles/myvhost/files/html-2/index.html
5. Create tasks to playbook.

<username>@pod-username-controller:~$ vi roles/myvhost/tasks/main.yml
...
- name: Ensure apache2 is installed
  apt:
    name: apache2
    state: latest
- name: Ensure apache2 is started and enabled
  service:
    name: apache2
    state: started
    enabled: true
- name: vhost-1 file is installed
  template:
    src: vhost-1.conf.j2
    dest: /etc/apache2/sites-available/vhost-1.conf
    owner: root
    group: root
    mode: 0644
- name: Enable vhost-1
  command: a2ensite vhost-1.conf
  notify:
    - restart apache2
- name: vhost-2 file is installed
  template:
    src: vhost-2.conf.j2
    dest: /etc/apache2/sites-available/vhost-2.conf
    owner: root
    group: root
    mode: 0644
- name: Enable vhost-2
  command: a2ensite vhost-2.conf
  notify:
    - restart apache2
- name: HTML content is installed
  copy:
    src: html-1/
    dest: "/var/www/vhosts/{{ inventory_hostname }}-1"
- name: HTML content is installed
  copy:
    src: html-2/
    dest: "/var/www/vhosts/{{ inventory_hostname }}-2"
...
6. Create Handlers.

<username>@pod-username-controller:~$ vi roles/myvhost/handlers/main.yml
...
- name: restart apache2
  service:
    name: apache2
    state: restarted
...
7. Create vhost-1 template.

<username>@pod-username-controller:~$ vi roles/myvhost/templates/vhost-1.conf.j2
...
<VirtualHost *:80>
    ServerAdmin webmaster@vhost-1.{{ inventory_hostname }}
    ServerName vhost-1.{{ inventory_hostname }}
    ErrorLog /var/log/apache2/vhost.{{ inventory_hostname }}-1-error.log
    CustomLog /var/log/apache2/vhost.{{ inventory_hostname }}-1-common.log common
    DocumentRoot /var/www/vhosts/{{ inventory_hostname }}-1/

    <Directory /var/www/vhosts/{{ inventory_hostname }}-1/>
        Options +Indexes +FollowSymlinks +Includes
        Order allow,deny
        Allow from all
    </Directory>
</VirtualHost>
...
8. Create vhost-2 template

<username>@pod-username-controller:~$ vi roles/myvhost/templates/vhost-2.conf.j2
...
<VirtualHost *:80>
    ServerAdmin webmaster@vhost-2.{{ inventory_hostname }}
    ServerName vhost-2.{{ inventory_hostname }}
    ErrorLog /var/log/apache2/vhost.{{ inventory_hostname }}-2-error.log
    CustomLog /var/log/apache2/vhost.{{ inventory_hostname }}-2-common.log common
    DocumentRoot /var/www/vhosts/{{ inventory_hostname }}-2/

    <Directory /var/www/vhosts/{{ inventory_hostname }}-2/>
        Options +Indexes +FollowSymlinks +Includes
        Order allow,deny
        Allow from all
    </Directory>
</VirtualHost>
...
9. Run playbook.

<username>@pod-username-controller:~$ vi use-vhost-role.yml
...
- name: Use myvhost role playbook
  hosts: webservers
  become: true
  pre_tasks:
    - name: pre_tasks message
      debug:
        msg: 'Ensure web server configuration.'

  roles:
    - myvhost

  post_tasks:
    - name: post_tasks message
      debug:
        msg: 'Web server is configured.'
...
9. Running playbook.

<username>@pod-username-controller:~$ ansible-playbook use-vhost-role.yml --syntax-check
<username>@pod-username-controller:~$ ansible-playbook use-vhost-role.yml
10. Verify vhost.

<username>@pod-username-controller:~$ curl -H "Host: vhost-1.pod-username-managed1" http://pod-username-managed1
<username>@pod-username-controller:~$ curl -H "Host: vhost-2.pod-username-managed1" http://pod-username-managed1
<username>@pod-username-controller:~$ curl -H "Host: vhost-1.pod-username-managed2" http://pod-username-managed2
<username>@pod-username-controller:~$ curl -H "Host: vhost-2.pod-username-managed2" http://pod-username-managed2

J. Managing Secrets

1. Create directory.

<username>@pod-username-controller:~$ cd ~/
<username>@pod-username-controller:~$ mkdir data-secret
<username>@pod-username-controller:~$ cd data-secret
2. Create ansible configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory = ./inventory
...
3. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[devservers]
pod-username-managed1
...
4. Create secret file.

<username>@pod-username-controller:~$ vi secret.yml
...
username: ansibleuser1
pw: adinusa88
...
5. Encrypt files secret.

<username>@pod-username-controller:~$ ansible-vault encrypt secret.yml
 New Vault password: adinusa88
 Confirm New Vault password: adinusa88
6. Create playbook.

<username>@pod-username-controller:~$ vi create_users.yml
...
- name: create user accounts for all our servers
  hosts: devservers
  become: true

  vars_files:
    - secret.yml
  tasks:
    - name: Creating user from secret.yml
      user:
        name: "{{username}}"
        password: "{{pw | password_hash('sha512')}}"
...
7. Run playbook.

<username>@pod-username-controller:~$ ansible-playbook --syntax-check --ask-vault-pass create_users.yml
<username>@pod-username-controller:~$ echo 'adinusa88' > vault-pass
<username>@pod-username-controller:~$ chmod 600 vault-pass
<username>@pod-username-controller:~$ ansible-playbook --vault-password-file=vault-pass create_users.yml
8. Verify user.

<username>@pod-username-controller:~$ ssh ansibleuser1@pod-username-managed1
$ hostname
$ whoami

K. Conditional and Loop

1. Create directory.

<username>@pod-username-controller:~$ cd ~/
<username>@pod-username-controller:~$ mkdir conditional-loop
<username>@pod-username-controller:~$ cd conditional-loop
2. Create ansible configuration.

<username>@pod-username-controller:~$ vi ansible.cfg
...
[defaults]
inventory = ./inventory
...
3. Create inventory.

<username>@pod-username-controller:~$ vi inventory
...
[database_servers]
pod-username-managed2
...
4. Create playbook.

<username>@pod-username-controller:~$ vi database_setup.yml
...
- name: Database Setup play
  hosts: database_servers
  become: true
  vars:
    min_ram_size_bytes: 2000000000
    supported_distros:
    - Ubuntu
  tasks:
    - name: Setup Database tasks on supported hosts w/ Min. RAM
      include_tasks: "{{ ansible_distribution }}_database_tasks.yml"
      when:
        - ansible_distribution in supported_distros
        - ansible_memtotal_mb*1024*1024 >= min_ram_size_bytes 
    - name: Print a message for unsupported Distros
      debug:
        msg: >
          {{ inventory_hostname }} is a
          {{ ansible_distribution }}-based host, which is not one
          of the supported distributions ({{ supported_distros }})
      when: ansible_distribution not in supported_distros
    - name: Print a message for systems with insufficient RAM
      debug:
        msg: >
          {{ inventory_hostname }} does not meet the minimum
          RAM requirements of {{ min_ram_size_bytes }} bytes.
      when: ansible_memtotal_mb*1024*1024 < min_ram_size_bytes
5. Create ubuntu database tasks.

<username>@pod-username-controller:~$ vi Ubuntu_database_tasks.yml
...
- name: Set the 'db_service' fact
  set_fact:
    db_service: mariadb
- name: Ensure database packages are installed
  apt:
    name:
      - mariadb-server
      - python3-pymysql
    state: present
- name: Ensure the database service is started
  service:
    name: "{{ db_service }}"
    state: started
    enabled: true
- name: Create Database Users
  include_tasks: database_user_tasks.yml
...
6. Create database user tasks.

<username>@pod-username-controller:~$ vi database_user_tasks.yml
...
- name: Ensure database permission groups exist
  group:
    name: "{{ item }}"
    state: present
  loop: "{{ host_permission_groups }}"

- name: Ensure Database Users exist 
  user: 
    name: "{{ item.username }}" 
    groups: "{{ item.role }}" 
    append: yes 
    state: present 
  loop: "{{ user_list }}" 
  when: item.role in host_permission_groups

- name: MySQL user
  mysql_user:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    priv: '*.*:{{ item.access}}'
    state: present
  loop: "{{ user_list }}"
  when: "item.role in host_permission_groups"
...
7. Create group_vars.

<username>@pod-username-controller:~$ mkdir group_vars
<username>@pod-username-controller:~$ vi group_vars/database_servers.yml
...
host_permission_groups:
  - dbadmin
  - dbuser
...
8. Create group_vars all.

vi group_vars/all.yml
...
user_list:
  - name: <your-full-name> Admin
    username: <username>
    password: adinusa88
    access: ALL
    role: dbadmin
  - name: <your-full-name> User
    username: <username>
    password: adinusa88
    access: SELECT
    role: dbuser
...
9. Running playbook.

<username>@pod-username-controller:~$ ansible-playbook --syntax-check database_setup.yml 
<username>@pod-username-controller:~$ ansible-playbook database_setup.yml
10. Verify.

<username>@pod-username-controller:~$ ssh pod-username-managed2 "sudo mysql -u root -e 'SELECT user FROM user;' mysql"

L. Quiz 2 Ansible

1. Create a new folder in the user home directory. Name it quiz2.

2. Create a new folder in the quiz2 directory. Name it group_vars.

3. In the group_vars folder, create 2 new files with the below requirements:

     a. Create the first file named managed1-host-<username>.yml. This file needs to contain a list of user ops from user ops1 until ops50 (ops[1-50]) and list of user dev from user dev1 until dev50 (dev[1-50]). Name the variable for list of user ops with 'list_user_ops_managed1' and for user dev with 'list_user_dev_managed1'.
     b. Create the second file named managed2-host-<username>.yml. This file needs to contain a list of user ops from user ops51 until ops100 (ops[51-100]) and list of user dev from user dev51 until dev100 (dev[51-100]). Name the variable for list of user ops with 'list_user_ops_managed2' and for user dev with 'list_user_dev_managed2'.
     c. Ensure the total line of each list is 51 lines (variable name + list of users).

4. In the quiz2 folder, create inventory file. Value of the section in this file needs to be same with the file name in the group_vars directory.

5. In the quiz2 folder, create a file named secret.yml and store the variable pass with adinusa88 as the value. The file needs to be encrypted by using ansible-vault, and use belajaransible as the encryption password. Store the encryption password in the vault-pass file and change the permission file with 600.

6. In the quiz2 folder, create playbook with below tasks:

a. Create user with username dev[1-50] dan ops[1-50] in pod-username-managed1
b. Create user with username dev[51-100] dan ops[51-100] in pod-username-managed2
c. Each user has password "adinusa88"
d. Name the file of playbook with quiz2-tasks.yml

7. Ensure the user can be logged in. Tips: use below command for random check.

# for pod-username-managed1
RAND_NUMBER=$(python3 -c "import random; print(random.randrange(1,50))")
ssh pod-username-managed1 -l [dev or ops]${RAND_NUMBER}     

#for pod-username-managed2
RAND_NUMBER=$(python3 -c "import random; print(random.randrange(51,100))")
ssh pod-username-managed2 -l [dev or ops]${RAND_NUMBER}